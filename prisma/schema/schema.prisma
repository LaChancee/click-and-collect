// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

// Catalogue de produits
model Category {
  id          String  @id @default(nanoid(11))
  name        String
  slug        String  @unique
  description String?
  image       String?
  position    Int     @default(0)
  isActive    Boolean @default(true)

  // Relation avec la boulangerie
  bakeryId String
  bakery   Organization @relation(fields: [bakeryId], references: [id], onDelete: Cascade)

  // Relations
  articles Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Article {
  id          String  @id @default(nanoid(11))
  name        String
  slug        String  @unique
  description String?
  price       Decimal @db.Decimal(10, 2)
  image       String?
  imageUrl    String?
  isActive    Boolean @default(true)
  isAvailable Boolean @default(true)
  stockCount  Int? // Pour produits à quantité limitée
  position    Int     @default(0)

  // Relation avec la catégorie
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Relation avec la boulangerie
  bakeryId String
  bakery   Organization @relation("BakeryArticles", fields: [bakeryId], references: [id], onDelete: Cascade)

  // Relations
  allergens     ProductAllergen[]
  orderItems    OrderItem[]
  favoriteItems FavoriteItem[]
  mealDealItems MealDealItem[] // Relation avec les formules
  promotions    Promotion[] // Relation avec les promotions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Nouvelle entité pour les promotions
model Promotion {
  id                String       @id @default(nanoid(11))
  name              String
  slug              String       @unique
  description       String?
  discountType      DiscountType
  discountValue     Decimal      @db.Decimal(10, 2) // Pourcentage ou montant fixe
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean      @default(true)
  minimumOrderValue Decimal?     @db.Decimal(10, 2) // Montant minimum pour appliquer la promotion

  // Relation avec la boulangerie
  bakeryId String
  bakery   Organization @relation(fields: [bakeryId], references: [id], onDelete: Cascade)

  // Relation avec les produits concernés (optionnel - si null, s'applique à tous les produits)
  articles Article[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Nouvelle entité pour les formules (meal deals)
model MealDeal {
  id          String  @id @default(nanoid(11))
  name        String
  slug        String  @unique
  description String?
  price       Decimal @db.Decimal(10, 2) // Prix de la formule
  image       String?
  imageUrl    String?
  isActive    Boolean @default(true)
  position    Int     @default(0)

  // Relation avec la boulangerie
  bakeryId String
  bakery   Organization @relation(fields: [bakeryId], references: [id], onDelete: Cascade)

  // Relation avec les éléments de la formule
  items MealDealItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Items qui composent une formule
model MealDealItem {
  id        String  @id @default(nanoid(11))
  quantity  Int     @default(1)
  required  Boolean @default(false) // Si l'article est obligatoire dans la formule
  groupName String? // Pour regrouper les choix (ex: "Boisson", "Dessert", etc.)

  // Relation avec la formule
  mealDealId String
  mealDeal   MealDeal @relation(fields: [mealDealId], references: [id], onDelete: Cascade)

  // Relation avec le produit
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mealDealId, articleId, groupName])
}

model Allergen {
  id          String  @id @default(nanoid(11))
  name        String  @unique
  description String?

  // Relations
  products ProductAllergen[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductAllergen {
  articleId  String
  allergenId String

  article  Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  allergen Allergen @relation(fields: [allergenId], references: [id], onDelete: Cascade)

  @@id([articleId, allergenId])
}

model FavoriteItem {
  id String @id @default(nanoid(11))

  // Relation avec Client (Organization)
  customerId String
  customer   Organization @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // Relation avec Product
  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([customerId, articleId])
}

// Système de créneaux horaires
model TimeSlot {
  id        String   @id @default(nanoid(11))
  startTime DateTime
  endTime   DateTime
  maxOrders Int      @default(10)
  isActive  Boolean  @default(true)

  // Relation avec la boulangerie
  bakeryId String
  bakery   Organization @relation(fields: [bakeryId], references: [id])

  // Relations
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Système de commandes
model Order {
  id              String         @id @default(nanoid(11))
  orderNumber     String         @unique
  totalAmount     Decimal        @db.Decimal(10, 2)
  status          OrderStatus    @default(PENDING)
  paymentStatus   PaymentStatus  @default(PENDING)
  paymentMethod   PaymentMethod?
  paymentIntentId String?
  stripeSessionId String? // ID de la session Stripe Checkout
  notes           String?

  // Pour les commandes anonymes
  isGuestOrder Boolean @default(false)
  guestEmail   String?
  guestPhone   String?
  guestName    String?

  // Relation avec Client (Organization) - rendue optionnelle
  customerId String?
  customer   Organization? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  // Relation avec TimeSlot
  timeSlotId String
  timeSlot   TimeSlot    @relation(fields: [timeSlotId], references: [id])
  items      OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD_ONLINE
  CARD_INSTORE
  CASH_INSTORE
}

model OrderItem {
  id        String  @id @default(nanoid(11))
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  notes     String?

  // Relation avec Order
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Relation avec Product
  articleId String
  article   Article @relation(fields: [articleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Configuration et paramètres
model Settings {
  id                String   @id @default(nanoid(11))
  minOrderValue     Decimal? @db.Decimal(10, 2)
  maxOrdersPerSlot  Int      @default(10)
  storeOpenTime     String // Format HH:MM
  storeCloseTime    String // Format HH:MM
  timeSlotDuration  Int      @default(15) // En minutes
  preOrderDaysAhead Int      @default(3)
  paymentThreshold  Decimal? @db.Decimal(10, 2) // Montant minimal pour paiement en ligne obligatoire

  // Relation avec la boulangerie
  bakeryId String       @unique
  bakery   Organization @relation(fields: [bakeryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Feedback et avis
model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
